(*Part 1.1a*)
let rec pow x n = 
  if n < 0 then (*n < 0, return 0*)
    0
  else if n = 0 then (*n = 0, return 1*)
    1
  else if n < 2 then (*n < 2, return x*)
    x
  else 
    x * pow x (n - 1);;

(*Part 1.1b*)
let rec float_pow x n = 
  if n < 0 then (*n < 0, return 0.0*)
    0.0
  else if n = 0 then (*n = 0, return 1.0*)
    1.0
  else if n < 2 then (*n < 2, return x*)
    x
  else
    x *. float_pow x (n - 1);;

(*Part 1.2*)
let rec compress lst = 
  match lst with 
  | h :: (b :: _ as t) -> 
      if h = b then (*If current element matches next element, compress*)
        compress t
      else (*If current does not match, add to list*)
        h :: compress t|_ -> lst;;

(*Part 1.3*)
let rec remove_if lst pred = 
  match lst with
  | [] -> []
  | h :: t -> 
      if pred h then (*If x follows predicate, remove_if*)
        remove_if t pred
      else (*If x does not follow predicate, add to list*)
        h :: remove_if t pred;;

(*Part 1.4*)
let slice list i j = 
  if i > j then (*i > j, return empty list*)
    []
  else
    let rec pick x = function (*Picks first element and adds following to list*)
      | [] -> []
      | h :: t -> 
          if x = 1 then
            []
          else
            h :: pick (x - 1) t
    in
    let rec move x = function (*Moves correct elements to list*)
      | [] -> []
      | h :: t as body ->
          if x = 0 then
            body
          else
            move (x - 1) t
    in
    pick (j - i + 1) (move i list);;

(*Part 1.5*)   
let rec equivsHelper pred lst = (*Adds elements to list that follow predicate*)
  match lst with
  | [] -> [] 
  | h :: t ->
      if (pred h) then (*Adds elements to list that follow predicate*)
        h ::(equivsHelper pred t)
      else 
        (equivsHelper pred t);;
let rec equivsCompare lst1 lst2 = (*Compares the two lists*)
  match lst1 with
  | [] -> lst2
  | h :: t -> let x = (remove_if lst2 ((=) h)) in (equivsCompare t x);;
let rec equivs pred lst = 
  match lst with
  | [] -> [[]]
  | h :: t -> let a = (equivsHelper (pred  h) lst) in
      let b = (equivsCompare a t) in
      match b with
      | [] -> [a]
      | x :: xs -> a::(equivs pred b);;

(*Part 1.6*) 
let checkIfPrime a = (*Checks if input a is prime*)
  let a = max a (-a) in
  let rec divideCheck b =
    b * b > a || (a mod b <> 0 && divideCheck (b + 1)) in
  divideCheck 2;;
let rec isPrime a b = (*Both a and b are already prime*)
  if a > b then
    []
  else
    let goldbachhelper = isPrime (a + 1) b in
    if checkIfPrime a then (*If a is prime, add to goldbachhelper*)
      a :: goldbachhelper
    else
      goldbachhelper;;
let goldbachpair a = 
  let rec aux x = 
    if a = 2 then
      (0, 2) (*Returns (0, 2) if a = 2*)
    else if a < 2 then
      (0, 0) (*Returns (0, 0) if a < 2*)
    else if checkIfPrime x && checkIfPrime (a - x) then (*Both x and input - x are prime*)
      (x, a - x) 
    else (*Otherwise add 1 to x*)
      aux (x + 1) in aux 2;;

(*Part 1.7*)
let rec equiv_on f g lst = 
  match lst with
  | [] -> true
  | h :: t -> 
      if (f h) = (g h) then (*Function f and g become =, then true*)
        true
      else 
        false;;

(*Part 1.8*)
let rec pairwisefilter cmp lst = 
  match lst with
  | [] -> []
  | h :: b:: t -> let add_body = pairwisefilter cmp t in
      (cmp h b) :: add_body (*Compares head and tail based on predicate*)
  | h :: [] -> [h];;

(*Part 1.9*)
let rec polynomial lst = fun x ->
  match lst with
  | [] -> 0
  | (a, b)::lst' -> let tailPolynomial = polynomial lst' in
      let c = (float_of_int x) ** (float_of_int b) |> int_of_float in
      a * c + tailPolynomial x;; (*Goes through list two at a time*)

(*Part 1.10*)
let rec powersetHelper pred lst = 
  match lst with
  | [] -> []
  | h :: t -> (pred h) :: (powersetHelper pred t);;
let rec powerset = function (*Puts in empty set automatically*)
  | [] -> [[]]
  | h :: t ->
      let lst' = powerset t in
      lst' @ powersetHelper (fun x -> h :: x) lst';; (*Powerset called for each combination*)
  
 